/*
 * Build configuration for the Quality Tools for BlueJ product.
 * Version: 2019.12.7.2
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
}

compileJava {
    // Establish compatibility with JDK used to build BlueJ
    options.compilerArgs.addAll(['--release', '11'])
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        excludeEngines 'junit-vintage'
    }
}
// Runs jaCoCoTestReport after test is run
test.finalizedBy jacocoTestReport

dependencies {
    // These dependencies are exported to consumers; found on their compile classpaths.
    // api 'org.apache.commons:commons-math3:3.6.1'

    // These add all bundled dependencies.
    compile fileTree(dir: 'src/lib', include: '*.jar')

    // These dependencies are used internally; not exposed on consumers' compile classpaths.
    // implementation 'com.google.guava:guava:28.0-jre'

    // JUnit 5 = JUnit Platform + JUnit Jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
}

// Configures JaCoCo version and where reports are stored
jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("${buildDir}/reports/jacoco")
}

jacocoTestReport {
    // Generates html report in build directory
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

jar {
    manifest {
        attributes "Main-Class": "edu.msudenver.bluejext.qualitytools.QualityToolsExtension"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

javadoc {
     description 'Generates public API javadocs'
     options.addBooleanOption('author', true)
     options.addBooleanOption('version', true)
     options.addStringOption('bottom',
        "<a rel='license' href='http://creativecommons.org/licenses/by-sa/4.0/'>"
        + "<img alt='Creative Commons License' style='border-width:0' "
        + "src='https://i.creativecommons.org/l/by-sa/4.0/88x31.png' /></a><br />"
        + "This work is licensed under a "
        + "<a rel='license' href='http://creativecommons.org/licenses/by-sa/4.0/'>"
        + "Creative Commons Attribution-ShareAlike 4.0 International License</a>.")
}

task doc(type: Javadoc) {
     group 'Documentation'
     description 'Generates maintenance-level javadocs'
     source = sourceSets.main.allJava
     classpath = configurations.compile
     options.memberLevel = JavadocMemberLevel.PRIVATE
     options.addBooleanOption('author', true)
     options.addBooleanOption('version', true)
     options.addStringOption('bottom',
        "<a rel='license' href='http://creativecommons.org/licenses/by-sa/4.0/'>"
        + "<img alt='Creative Commons License' style='border-width:0' "
        + "src='https://i.creativecommons.org/l/by-sa/4.0/88x31.png' /></a><br />"
        + "This work is licensed under a "
        + "<a rel='license' href='http://creativecommons.org/licenses/by-sa/4.0/'>"
        + "Creative Commons Attribution-ShareAlike 4.0 International License</a>.")
}

task checkstyle(type: Checkstyle, dependsOn: ['checkstyleMain', 'checkstyleTest']) {
    group 'Verification'
    description 'Generates reports from Checkstyle.'
}

tasks.withType(Checkstyle) {
    ignoreFailures = true
    reports {
        xml.enabled false
        html.enabled true
    }
}
